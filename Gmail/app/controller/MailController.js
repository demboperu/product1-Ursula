/*
 * File: app/controller/MailController.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('MyApp.controller.MailController', {
    extend: 'Ext.app.Controller',

    stores: [
        'MailStore'
    ],

    refs: [
        {
            ref: 'headerPanel',
            selector: '#headerPanel'
        },
        {
            ref: 'mailPanel',
            selector: '#mailPanel'
        },
        {
            ref: 'gridPanel',
            selector: '#gridPanel'
        },
        {
            ref: 'contactGrid',
            selector: '#contactGrid'
        },
        {
            ref: 'mailToolbar',
            selector: '#mailToolbar'
        },
        {
            ref: 'appView',
            selector: '#appView'
        },
        {
            ref: 'pagingToolbar',
            selector: '#pagingToolbar'
        },
        {
            ref: 'mailForm',
            selector: '#mailForm'
        }
    ],

    onLoad: function(component, eOpts) {

        //set interval for refreshing contacts
        var contactGrid = this.getContactGrid();

        var refreshContacts = function(){
            contactGrid.getStore().load({params:{
                    idUsuario: localStorage.getItem("userId")
                }
            });
            console.log('contacts updated');
        };

        interval = 1000 * 60 * 5;
        intervalID = setInterval(refreshContacts, interval);

        //set user name on header panel
        var headerPanel = this.getHeaderPanel();
        headerPanel.setTitle("Welcome "+localStorage.getItem("userName"));


        //load user's mails

        var mailGrid = this.getGridPanel();

        mailGrid.getStore().load({params:{
            idUsuario: localStorage.getItem("userId")
            }
        });

        //Hide refresh button
        var pagtool = this.getPagingToolbar();
        pagtool.down('#refresh').hide();


        refreshContacts();
    },

    refreshInbox: function(target) {
        this.getGridPanel().getStore().load({params:{
                idUsuario: localStorage.getItem("userId")
                }
            });
    },

    logout: function(target) {

        //Stop refreshing contacts grid
        clearInterval(intervalID);

        //clear mail panel
        var mailPanel = this.getMailPanel(),		// Get details panel
            mailToolbar = this.getMailToolbar();	// Get details panel toolbar

        // Clear panel content
        mailPanel.update(null);

        // Hide toolbar
        mailToolbar.hide();


        this.getAppView().layout.setActiveItem(0);

        localStorage.removeItem("userName");
        localStorage.removeItem("userId");

    },

    sendMail: function(target) {
        // Get the window and close it
        var formWindow = target.up("window");

        //Obtain values
        var values = this.getMailForm().getValues();


        function successCallback(response, ops){
           formWindow.destroy();
        }

        function  failureCallback(response, ops){
           formWindow.destroy();
        }


        function sendMail(){
            //Send mail
            Ext.Ajax.request({
                url: 'sendMail.jsp',
                params: values,
                success: successCallback,
                failure: failureCallback
            });
        }


        function validate(){
            if(values.to===""){
                Ext.MessageBox.alert('Mail Error', 'Specify at least one destinatary');
            }else if(values.subject===""){
               values.subject = "(No subject)";
               sendMail();
            }
        }

        validate();
    },

    deleteSelected: function(target) {
        var me = this;

        // Confirm this delete
        Ext.Msg.confirm('Confirm', 'Are you sure you want to delete the mail(s) selected?', function(btn) {

            // User confirmed yes
            if (btn == 'yes') {

                // Find records with indoor=true
                var records = me.getMailStoreStore().queryBy(function(record) {
                    return record.get('selected') === true;
                });

                var store = me.getMailStoreStore();
                records.each(function(record) {
                   // var mail = record.findRecord("idMail",record.data.idMail);

                    // Delete from store
                    store.remove(record);

                });

                var mailPanel = me.getMailPanel(),		// Get details panel
                    mailToolbar = me.getMailToolbar();	// Get details panel toolbar

                // Clear panel content
                mailPanel.update(null);

                // Hide toolbar
                mailToolbar.hide();
            }


        });

    },

    delete: function(target) {

        var me = this;

        // Confirm this delete
        Ext.Msg.confirm('Confirm', 'Are you sure you want to delete this mail?', function(btn) {

            // User confirmed yes
            if (btn == 'yes') {

                var data = target.up('panel').data,				// Get assosiated data
                    store = me.getMailStoreStore(),				// Get Records store
                    mail = store.findRecord("idMail",data.idMail),// Get current record
                    mailPanel = me.getMailPanel(),		// Get details panel
                    mailToolbar = me.getMailToolbar();	// Get details panel toolbar

                // Delete from store
                store.remove(mail);

                // Clear panel content
                mailPanel.update(null);

                // Hide toolbar
                mailToolbar.hide();

            }


        });

    },

    replay: function(target) {

        // Create new mail form window
        var data = target.up('panel').data,						// Get panel's assosiated data
        	store = this.getMailStoreStore(),					// Get store
            mail = store.findRecord("idMail",data.idMail),					// Get current record
        	newMail = Ext.create('widget.newMailPanel'),			// Create new form window
        	form = newMail.down('form').getForm();				// Get form within window

        // Load mail model into form
        if(mail!==null){
            var content = mail.data.content,
                from = mail.data.from;

            mail.data.from = mail.data.to;
            mail.data.to = from;
            mail.data.content ="";

            form.loadRecord(mail);

            mail.data.content = content;
            mail.data.to = mail.data.from;
            mail.data.from = from;

            // Show window
            newMail.show();
        }
    },

    new: function(target) {

        // Create new mail form window
        var newMail = Ext.create("widget.newMailPanel");


        // Show window
        //newMail.showAt(Ext.getBody().getViewSize().width - 150 - 586,Ext.getBody().getViewSize().height - 520);
        newMail.show();

        newMail.items.get(0).items.get(0).getStore().load({params:{
            idUsuario: localStorage.getItem("userId")
            }
        });

    },

    view: function(target, record) {

        var mail = this.getMailPanel(),	// Get detail panel via controller ref
            toolbar = this.getMailToolbar();	// Get detail panel toolbar via controller ref

        // Update the detail panel with the selected row's data
        mail.update(record.data);
        toolbar.show();
    },

    forward: function(target) {

        // Create new mail form window
        var data = target.up('panel').data,						// Get panel's assosiated data
        	store = this.getMailStoreStore(),					// Get store
            mail = store.findRecord("idMail",data.idMail),					// Get current record
        	newMail = Ext.create('widget.newMailPanel'),			// Create new form window
        	form = newMail.down('form').getForm();				// Get form within window

        // Load mail model into form
        if(mail!==null){
            var from = mail.data.from;

            mail.data.from = mail.data.to;
            mail.data.to = from;

            form.loadRecord(mail);

            mail.data.to = mail.data.from;
            mail.data.from = from;

            // Show window
            newMail.show();
        }
    },

    refreshContacts: function(context) {


    },

    init: function(application) {
        this.control({
            "#mainPanel": {
                show: this.onLoad
            },
            "#btnRefresh": {
                click: this.refreshInbox
            },
            "#btnLogout": {
                click: this.logout
            },
            "#btnSend": {
                click: this.sendMail
            },
            "#btnDeleteSelected": {
                click: this.deleteSelected
            },
            "#btnDelete": {
                click: this.delete
            },
            "#mailPanel #btnReplay": {
                click: this.replay
            },
            "#newMailButton": {
                click: this.new
            },
            "#gridPanel": {
                select: this.view
            },
            "#btnForward": {
                click: this.forward
            }
        });
    }

});
